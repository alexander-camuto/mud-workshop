// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct PortalData {
  uint256 toChainId;
  uint32 toX;
  uint32 toY;
}

library Portal {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "app", name: "Portal", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x74626170700000000000000000000000506f7274616c00000000000000000000);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0028030020040400000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (uint32, uint32)
  Schema constant _keySchema = Schema.wrap(0x0008020003030000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint32, uint32)
  Schema constant _valueSchema = Schema.wrap(0x002803001f030300000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](2);
    keyNames[0] = "x";
    keyNames[1] = "y";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "toChainId";
    fieldNames[1] = "toX";
    fieldNames[2] = "toY";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get toChainId.
   */
  function getToChainId(uint32 x, uint32 y) internal view returns (uint256 toChainId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get toChainId.
   */
  function _getToChainId(uint32 x, uint32 y) internal view returns (uint256 toChainId) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set toChainId.
   */
  function setToChainId(uint32 x, uint32 y, uint256 toChainId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((toChainId)), _fieldLayout);
  }

  /**
   * @notice Set toChainId.
   */
  function _setToChainId(uint32 x, uint32 y, uint256 toChainId) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((toChainId)), _fieldLayout);
  }

  /**
   * @notice Get toX.
   */
  function getToX(uint32 x, uint32 y) internal view returns (uint32 toX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toX.
   */
  function _getToX(uint32 x, uint32 y) internal view returns (uint32 toX) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toX.
   */
  function setToX(uint32 x, uint32 y, uint32 toX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((toX)), _fieldLayout);
  }

  /**
   * @notice Set toX.
   */
  function _setToX(uint32 x, uint32 y, uint32 toX) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((toX)), _fieldLayout);
  }

  /**
   * @notice Get toY.
   */
  function getToY(uint32 x, uint32 y) internal view returns (uint32 toY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Get toY.
   */
  function _getToY(uint32 x, uint32 y) internal view returns (uint32 toY) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint32(bytes4(_blob)));
  }

  /**
   * @notice Set toY.
   */
  function setToY(uint32 x, uint32 y, uint32 toY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toY)), _fieldLayout);
  }

  /**
   * @notice Set toY.
   */
  function _setToY(uint32 x, uint32 y, uint32 toY) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((toY)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(uint32 x, uint32 y) internal view returns (PortalData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(uint32 x, uint32 y) internal view returns (PortalData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(uint32 x, uint32 y, uint256 toChainId, uint32 toX, uint32 toY) internal {
    bytes memory _staticData = encodeStatic(toChainId, toX, toY);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(uint32 x, uint32 y, uint256 toChainId, uint32 toX, uint32 toY) internal {
    bytes memory _staticData = encodeStatic(toChainId, toX, toY);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(uint32 x, uint32 y, PortalData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.toChainId, _table.toX, _table.toY);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(uint32 x, uint32 y, PortalData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.toChainId, _table.toX, _table.toY);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(bytes memory _blob) internal pure returns (uint256 toChainId, uint32 toX, uint32 toY) {
    toChainId = (uint256(Bytes.getBytes32(_blob, 0)));

    toX = (uint32(Bytes.getBytes4(_blob, 32)));

    toY = (uint32(Bytes.getBytes4(_blob, 36)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (PortalData memory _table) {
    (_table.toChainId, _table.toX, _table.toY) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(uint32 x, uint32 y) internal {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(uint256 toChainId, uint32 toX, uint32 toY) internal pure returns (bytes memory) {
    return abi.encodePacked(toChainId, toX, toY);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 toChainId,
    uint32 toX,
    uint32 toY
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(toChainId, toX, toY);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(uint32 x, uint32 y) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](2);
    _keyTuple[0] = bytes32(uint256(x));
    _keyTuple[1] = bytes32(uint256(y));

    return _keyTuple;
  }
}
